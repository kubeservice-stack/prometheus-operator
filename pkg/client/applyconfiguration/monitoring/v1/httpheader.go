// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	corev1 "k8s.io/api/core/v1"
)

// HttpHeaderApplyConfiguration represents a declarative configuration of the HttpHeader type for use
// with apply.
type HttpHeaderApplyConfiguration struct {
	SafeHttpHeaderApplyConfiguration `json:",inline"`
	Files                            []string `json:"files,omitempty"`
}

// HttpHeaderApplyConfiguration constructs a declarative configuration of the HttpHeader type for use with
// apply.
func HttpHeader() *HttpHeaderApplyConfiguration {
	return &HttpHeaderApplyConfiguration{}
}

// WithValues adds the given value to the Values field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Values field.
func (b *HttpHeaderApplyConfiguration) WithValues(values ...string) *HttpHeaderApplyConfiguration {
	for i := range values {
		b.Values = append(b.Values, values[i])
	}
	return b
}

// WithSecrets adds the given value to the Secrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Secrets field.
func (b *HttpHeaderApplyConfiguration) WithSecrets(values ...corev1.SecretKeySelector) *HttpHeaderApplyConfiguration {
	for i := range values {
		b.Secrets = append(b.Secrets, values[i])
	}
	return b
}

// WithFiles adds the given value to the Files field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Files field.
func (b *HttpHeaderApplyConfiguration) WithFiles(values ...string) *HttpHeaderApplyConfiguration {
	for i := range values {
		b.Files = append(b.Files, values[i])
	}
	return b
}
