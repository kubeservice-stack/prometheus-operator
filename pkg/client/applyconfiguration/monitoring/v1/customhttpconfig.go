// Copyright The prometheus-operator Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

// CustomHTTPConfigApplyConfiguration represents a declarative configuration of the CustomHTTPConfig type for use
// with apply.
type CustomHTTPConfigApplyConfiguration struct {
	HTTPHeaders map[string]HTTPHeaderApplyConfiguration `json:"httpHeaders,omitempty"`
}

// CustomHTTPConfigApplyConfiguration constructs a declarative configuration of the CustomHTTPConfig type for use with
// apply.
func CustomHTTPConfig() *CustomHTTPConfigApplyConfiguration {
	return &CustomHTTPConfigApplyConfiguration{}
}

// WithHTTPHeaders puts the entries into the HTTPHeaders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the HTTPHeaders field,
// overwriting an existing map entries in HTTPHeaders field with the same key.
func (b *CustomHTTPConfigApplyConfiguration) WithHTTPHeaders(entries map[string]HTTPHeaderApplyConfiguration) *CustomHTTPConfigApplyConfiguration {
	if b.HTTPHeaders == nil && len(entries) > 0 {
		b.HTTPHeaders = make(map[string]HTTPHeaderApplyConfiguration, len(entries))
	}
	for k, v := range entries {
		b.HTTPHeaders[k] = v
	}
	return b
}
